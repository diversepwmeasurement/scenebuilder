jobs:
  build:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Setup Java
      uses: oracle-actions/setup-java@v1
      with:
        release: ${{ inputs.java-version }}
        website: jdk.java.net
    - continue-on-error: true
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
        p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}
    - continue-on-error: true
      name: Setup JavaFX
      run: 'wget -P /tmp https://download2.gluonhq.com/openjfx/${{ inputs.javafx-version
        }}/openjfx-${{ inputs.javafx-version }}_osx-x64_bin-jmods.zip

        unzip /tmp/openjfx-${{ inputs.javafx-version }}_osx-x64_bin-jmods.zip -d /tmp

        '
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2
        restore-keys: ${{ runner.os }}-m2
    - continue-on-error: true
      if: ${{ inputs.test }}
      name: Run Tests
      run: 'mvn -B -ntp clean verify checkstyle:checkstyle --no-transfer-progress

        '
    - continue-on-error: true
      env:
        APP_VERSION: ${{ inputs.app-version }}
      name: Build and package JAR
      run: 'mvn -B -ntp -q versions:set -DnewVersion=${{ env.APP_VERSION }} -DgenerateBackupPoms=false

        mvn -B -ntp -q clean package -Dmaven.test.skip=true

        '
    - continue-on-error: true
      env:
        APP_VERSION: ${{ inputs.app-version }}
        INSTALL_DIR: app/target/install
        JAVAFX_HOME: /tmp/javafx-jmods-${{ inputs.javafx-version }}/
        JPACKAGE_HOME: ${{ env.JAVA_HOME }}
        MACSIGN_PREFIX: ${{ secrets.MACSIGN_PREFIX }}
        MACSIGN_USER: ${{ secrets.MACSIGN_USER }}
        MAIN_CLASS: com.oracle.javafx.scenebuilder.app.SceneBuilderApp
        PROJECT_VERSION: ${{ inputs.project-version }}
      id: outputfile
      name: Create Bundle using JPackage
      run: ".github/scripts/jpackage.sh \\\n  --icon app/assets/osx/icon-mac.icns\
        \ \\\n  --java-options '\"--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED\"\
        ' \\\n  --type dmg \\\n  --mac-package-identifier com.gluonhq.scenebuilder\
        \ \\\n  --mac-package-name 'Scene Builder' \\\n  --mac-package-signing-prefix\
        \ \"${{ env.MACSIGN_PREFIX }}\" \\\n  --mac-signing-key-user-name \"${{ env.MACSIGN_USER\
        \ }}\" \\\n  --mac-sign\nmv ${{ env.INSTALL_DIR }}/SceneBuilder-${{ env.APP_VERSION\
        \ }}.dmg ${{ env.INSTALL_DIR }}/SceneBuilder-${{ env.PROJECT_VERSION }}-amd64.dmg\n\
        ls ${{ env.INSTALL_DIR }}\necho ::set-output name=path::${{ env.INSTALL_DIR\
        \ }}/SceneBuilder-${{ env.PROJECT_VERSION }}-amd64.dmg\n"
    - continue-on-error: true
      name: Notarize Release Build
      uses: erwin1/xcode-notarizer@v1
      with:
        app-password: ${{ secrets.NOTARIZATION_PASSWORD }}
        apple-id: ${{ secrets.NOTARIZATION_USERNAME }}
        product-path: ${{ steps.outputfile.outputs.path }}
        team-id: ${{ secrets.MACSIGN_PREFIX }}
    - continue-on-error: true
      name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: ${{ steps.outputfile.outputs.path }}
name: MacOs Bundles
on:
  repository_dispatch:
    types: trigger-ga___bundles-mac.yml
