env:
  JAVAFX_VERSION: 21.0.1
  JAVA_VERSION: '21'
jobs:
  kit-bundles:
    needs:
    - precheck
    uses: gluonhq/scenebuilder/.github/workflows/bundles-kit.yml@master
    with:
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      project-version: ${{ needs.precheck.outputs.PROJECT_VERSION }}
  linux-bundles:
    needs:
    - precheck
    uses: gluonhq/scenebuilder/.github/workflows/bundles-linux.yml@master
    with:
      app-version: ${{ needs.precheck.outputs.APP_VERSION }}
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      javafx-version: ${{ needs.precheck.outputs.JAVAFX_VERSION }}
      project-version: ${{ needs.precheck.outputs.PROJECT_VERSION }}
      test: true
  mac-bundles:
    needs:
    - precheck
    secrets:
      CERTIFICATES_FILE_BASE64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
      CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
      MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
      MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
      NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
      NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
    uses: gluonhq/scenebuilder/.github/workflows/bundles-mac.yml@master
    with:
      app-version: ${{ needs.precheck.outputs.APP_VERSION }}
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      javafx-version: ${{ needs.precheck.outputs.JAVAFX_VERSION }}
      project-version: ${{ needs.precheck.outputs.PROJECT_VERSION }}
      test: true
  mac_aarch64-bundles:
    needs:
    - precheck
    secrets:
      CERTIFICATES_FILE_BASE64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
      CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
      MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
      MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
      NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
      NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
    uses: gluonhq/scenebuilder/.github/workflows/bundles-mac_aarch64.yml@master
    with:
      app-version: ${{ needs.precheck.outputs.APP_VERSION }}
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      javafx-version: ${{ needs.precheck.outputs.JAVAFX_VERSION }}
      project-version: ${{ needs.precheck.outputs.PROJECT_VERSION }}
      test: true
  precheck:
    outputs:
      APP_VERSION: ${{ steps.vars.outputs.APP_VERSION }}
      JAVAFX_VERSION: ${{ env.JAVAFX_VERSION }}
      JAVA_VERSION: ${{ env.JAVA_VERSION }}
      PROJECT_VERSION: ${{ steps.vars.outputs.PROJECT_VERSION }}
      S3_PATH: ${{ steps.vars.outputs.S3_PATH }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check out repository
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Set up Java
      uses: oracle-actions/setup-java@v1
      with:
        release: ${{ env.JAVA_VERSION }}
        website: jdk.java.net
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2
        restore-keys: ${{ runner.os }}-m2
    - continue-on-error: true
      id: vars
      name: Set environment
      run: "mvn -B -ntp -q versions:set -DremoveSnapshot -DgenerateBackupPoms=false\n\
        PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)\n\
        APP_VERSION=$PROJECT_VERSION\nS3_PATH=$PROJECT_VERSION\nCANDIDATE=${{ github.event.inputs.candidate\
        \ }}\nif [[ \"$CANDIDATE\" == RC ]]; then\n    PROJECT_VERSION=${PROJECT_VERSION}-RC\n\
        \    S3_PATH=RC/$PROJECT_VERSION\nfi\necho \"Releasing.. \"$PROJECT_VERSION\n\
        echo ::set-output name=APP_VERSION::$APP_VERSION\necho ::set-output name=PROJECT_VERSION::$PROJECT_VERSION\n\
        echo ::set-output name=S3_PATH::$S3_PATH\n"
      shell: bash
  release:
    needs:
    - precheck
    - linux-bundles
    - windows-bundles
    - mac-bundles
    - mac_aarch64-bundles
    - kit-bundles
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Set up Java
      uses: oracle-actions/setup-java@v1
      with:
        release: ${{ needs.precheck.outputs.JAVA_VERSION }}
        website: jdk.java.net
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2
        restore-keys: ${{ runner.os }}-m2
    - continue-on-error: true
      name: Download all build artifacts
      uses: actions/download-artifact@v2
    - continue-on-error: true
      name: Set Release Version
      run: 'mvn -B -ntp -q versions:set -DnewVersion=${{ needs.precheck.outputs.PROJECT_VERSION
        }} -DgenerateBackupPoms=false

        mvn -pl :parent process-resources

        '
    - continue-on-error: true
      env:
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        JRELEASER_S3_GLUON_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        JRELEASER_S3_GLUON_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        JRELEASER_S3_GLUON_REGION: us-east-1
        JRELEASER_S3_GLUON_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      name: Release with JReleaser
      run: "FILES_ACTIVE=\"RELEASE\"\nif [[ \"$PROJECT_VERSION\" == *-RC* ]]; then\n\
        \    FILES_ACTIVE=\"NEVER\"\nfi\nmvn -B -ntp -pl :parent -DartifactsDir=artifacts\
        \ -Ds3Path=${{ needs.precheck.outputs.S3_PATH }} \\\n  -Djreleaser.files.active=$FILES_ACTIVE\
        \ jreleaser:release\n"
    - continue-on-error: true
      if: always()
      name: JReleaser output
      uses: actions/upload-artifact@v2
      with:
        name: jreleaser-logs
        path: 'target/jreleaser/trace.log

          target/jreleaser/output.properties

          '
  windows-bundles:
    needs:
    - precheck
    secrets:
      WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      WINDOWS_CERTNAME: ${{ secrets.WINDOWS_CERTNAME }}
      WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
    uses: gluonhq/scenebuilder/.github/workflows/bundles-windows.yml@master
    with:
      app-version: ${{ needs.precheck.outputs.APP_VERSION }}
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      javafx-version: ${{ needs.precheck.outputs.JAVAFX_VERSION }}
      project-version: ${{ needs.precheck.outputs.PROJECT_VERSION }}
      test: true
name: Release
on:
  repository_dispatch:
    types: trigger-ga___release.yml
