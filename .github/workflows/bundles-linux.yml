jobs:
  build:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Install packages
      run: sudo apt-get install xdg-utils
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Setup Java
      uses: oracle-actions/setup-java@v1
      with:
        release: ${{ inputs.java-version }}
        website: jdk.java.net
    - continue-on-error: true
      name: Setup JavaFX
      run: 'wget -P /tmp https://download2.gluonhq.com/openjfx/${{ inputs.javafx-version
        }}/openjfx-${{ inputs.javafx-version }}_linux-x64_bin-jmods.zip

        unzip /tmp/openjfx-${{ inputs.javafx-version }}_linux-x64_bin-jmods.zip -d
        /tmp

        '
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2
        restore-keys: ${{ runner.os }}-m2
    - continue-on-error: true
      if: ${{ inputs.test }}
      name: Run Tests
      run: 'export DISPLAY=:90

        Xvfb -ac :90 -screen 0 1280x1024x24 > /dev/null 2>&1 &

        mvn -B -ntp clean verify checkstyle:checkstyle --no-transfer-progress

        '
    - continue-on-error: true
      env:
        APP_VERSION: ${{ inputs.app-version }}
      name: Build and package JAR
      run: 'mvn -B -ntp -q versions:set -DnewVersion=${{ env.APP_VERSION }} -DgenerateBackupPoms=false

        mvn -B -ntp -q clean package -Dmaven.test.skip=true -X

        '
    - continue-on-error: true
      env:
        APP_VERSION: ${{ inputs.app-version }}
        INSTALL_DIR: app/target/install
        JAVAFX_HOME: /tmp/javafx-jmods-${{ inputs.javafx-version }}/
        JPACKAGE_HOME: ${{ env.JAVA_HOME }}
        MAIN_CLASS: com.oracle.javafx.scenebuilder.app.SceneBuilderApp
        PROJECT_VERSION: ${{ inputs.project-version }}
      name: Create Bundle using JPackage
      run: "# Create DEB\n.github/scripts/jpackage.sh \\\n  --icon app/assets/linux/icon-linux.png\
        \ \\\n  --java-options '\"-Djdk.gtk.version=2\"' \\\n  --java-options '\"\
        --add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED\"' \\\n  --java-options '\"\
        -Djava.library.path=/opt/scenebuilder/lib/runtime/bin:/opt/scenebuilder/lib/runtime/lib\"\
        ' \\\n  --linux-menu-group '\"Development;Building;GUIDesigner;Java;\"' \\\
        \n  --resource-dir app/assets/linux \\\n  --install-dir /opt \\\n  --type\
        \ deb\nmv ${{ env.INSTALL_DIR }}/*.deb ${{ env.INSTALL_DIR }}/SceneBuilder-${{\
        \ env.PROJECT_VERSION }}.deb\n# Create RPM\n.github/scripts/jpackage.sh \\\
        \n  --icon app/assets/linux/icon-linux.png \\\n  --java-options '\"-Djdk.gtk.version=2\"\
        ' \\\n  --java-options '\"--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED\"\
        ' \\\n  --linux-menu-group '\"Development;Building;GUIDesigner;Java;\"' \\\
        \n  --resource-dir app/assets/linux \\\n  --install-dir /opt \\\n  --type\
        \ rpm\nmv ${{ env.INSTALL_DIR }}/*.rpm ${{ env.INSTALL_DIR }}/SceneBuilder-${{\
        \ env.PROJECT_VERSION }}.rpm\nls ${{ env.INSTALL_DIR }}\n"
    - continue-on-error: true
      name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: 'app/target/install/*.deb

          app/target/install/*.rpm

          '
name: Linux Bundles
on:
  repository_dispatch:
    types: trigger-ga___bundles-linux.yml
